"""
References:
    - https://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication
    - https://stackoverflow.com/questions/44212188/get-user-object-from-token-string-in-drf
"""

import warnings

from django.contrib.auth.models import User
from rest_framework import parsers, status
from rest_framework.authentication import (
    BasicAuthentication,
    SessionAuthentication,
    TokenAuthentication,
)
from rest_framework.authtoken.models import Token
from rest_framework.authtoken.serializers import AuthTokenSerializer
from rest_framework.decorators import api_view
from rest_framework.permissions import IsAuthenticated
from rest_framework.renderers import JSONRenderer
from rest_framework.request import Request
from rest_framework.response import Response
from rest_framework.views import APIView

from .decorators import api_endpoint_exception_handler
from .queries import (
    create_batch_and_corresponding_codes,
    get_batches_data,
    get_codes_data,
)

warnings.filterwarnings(action='ignore')


def get_user_from_token(token_string: str) -> User:
    return Token.objects.get(key=token_string).user



class MissingAuthTokenError(Exception):
    pass


class AuthView(APIView):
    throttle_classes = ()
    permission_classes = ()
    parser_classes = (parsers.FormParser, parsers.MultiPartParser, parsers.JSONParser, )
    renderer_classes = [JSONRenderer]
    serializer_class = AuthTokenSerializer

    # Payload for POST request: {"username": "some_username", "password": "some_password"}
    @api_endpoint_exception_handler(api_endpoint_description="AuthView endpoint - POST method")
    def post(self, request: Request) -> Response:
        post_data = request.data
        try:
            user = User.objects.get(username=post_data['username'])
        except User.DoesNotExist:
            return Response(data="Unauthorized", status=status.HTTP_401_UNAUTHORIZED)
        # else:
        #     post_data['username'] = user.username
        
        serializer = self.serializer_class(data=post_data)
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        token_obj, token_is_created = Token.objects.get_or_create(user=user) # request.user
        data = {
            'user_id': user.id,
            'username': user.username,
            'token': str(token_obj),
            'token_is_created': token_is_created,
        }
        status_code = status.HTTP_201_CREATED if token_is_created else status.HTTP_200_OK
        return Response(data=data, status=status_code)



# Payload for POST request: {"batch_name": "Batch #1", "num_codes_to_create": 5}
@api_view(['GET', 'POST'])
@api_endpoint_exception_handler(api_endpoint_description="Codes endpoint - GET/POST methods")
def codes(request: Request) -> Response:
    """History of codes generated by user"""
    try:
        token_string = request.query_params.get('token', None)
        if token_string is None:
            raise MissingAuthTokenError("Auth token missing. Please pass in query parameter 'token'")
        user = get_user_from_token(token_string=token_string)
    except Token.DoesNotExist:
        return Response(data="Unauthorized", status=status.HTTP_401_UNAUTHORIZED)
    user_id = user.id # request.user.id
    username = user.username # request.user.username
    if request.method == 'GET':
        batches_data = get_batches_data(user_id=user_id)
        batch_ids = list(map(lambda dict_obj: dict_obj['id'], batches_data))
        codes_data = get_codes_data(batch_id_subset=batch_ids)
        # codes = list(map(lambda dict_obj: dict_obj['code'], codes_data))
        response = {
            'user_id': user_id,
            'username': username,
            # 'batches_data': batches_data,
            'codes_data': codes_data,
            # 'batch_ids': batch_ids,
            # 'codes': codes,
        }
        return Response(data=response, status=status.HTTP_200_OK)
    elif request.method == 'POST':
        batch_name = request.data.get('batch_name', None)
        num_codes_to_create = request.data.get('num_codes_to_create', None)
        if batch_name is None:
            raise ValueError("Missing parameter 'batch_name' (of type string) in payload of POST request")
        if num_codes_to_create is None:
            raise ValueError("Missing parameter 'num_codes_to_create' (of type integer) in payload of POST request")
        try:
            num_codes_to_create = int(num_codes_to_create)
        except ValueError:
            raise ValueError("Expected parameter 'num_codes_to_create' to be of type integer")
        create_batch_and_corresponding_codes(
            creator_user_id=user_id,
            batch_name=batch_name,
            num_codes=num_codes_to_create,
        )
        return Response(data={}, status=status.HTTP_201_CREATED)
    return Response(data={}, status=status.HTTP_405_METHOD_NOT_ALLOWED)